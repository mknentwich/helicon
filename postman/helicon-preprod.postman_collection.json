{
	"info": {
		"_postman_id": "6afb43c3-4a51-45c0-8306-e939b2ea26bd",
		"name": "helicon-preprod",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"item": [
				{
					"name": "root-login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"storing jwt\", function() {",
									"    pm.response.to.have.header(\"Authorization\")",
									"    var token = pm.response.headers.get(\"Authorization\");",
									"    pm.environment.set(\"jwt\", token.replace(\"Bearer \", \"\"))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{rootpw}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "root",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/accounts/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "meta",
			"item": [
				{
					"name": "create eu",
					"item": [
						{
							"name": "create inland zone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"name is Inland\", function() {",
											"    pm.expect(pm.response.json().name).is.to.equal(\"Inland\");",
											"})",
											"",
											"pm.test(\"shipping is 300\", function() {",
											"    pm.expect(pm.response.json().shipping).is.to.equal(300);",
											"})",
											"",
											"pm.test(\"store zone\", function() {",
											"    var zone = pm.response.json();",
											"    pm.environment.set(\"zone_id\", zone.id);",
											"    pm.environment.set(\"zone_name\",zone.name);",
											"    pm.environment.set(\"zone_shipping\", zone.shipping);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Inland\",\n    \"shipping\": 300\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/zones",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"zones"
									]
								}
							},
							"response": []
						},
						{
							"name": "create austria",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Österreich\", function() {",
											"    pm.expect(state.name).to.equal(\"Österreich\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"austria_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Österreich\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create eu zone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"name is EU\", function() {",
											"    pm.expect(pm.response.json().name).is.to.equal(\"EU\");",
											"})",
											"",
											"pm.test(\"shipping is 700\", function() {",
											"    pm.expect(pm.response.json().shipping).is.to.equal(700);",
											"})",
											"",
											"pm.test(\"store zone\", function() {",
											"    var zone = pm.response.json();",
											"    pm.environment.set(\"zone_id\", zone.id);",
											"    pm.environment.set(\"zone_name\",zone.name);",
											"    pm.environment.set(\"zone_shipping\", zone.shipping);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"EU\",\n    \"shipping\": 700\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/zones",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"zones"
									]
								}
							},
							"response": []
						},
						{
							"name": "create slovakia",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"store id\", function() {",
											"    pm.environment.set(\"slovakia_id\", state.id);",
											"})",
											"",
											"pm.test(\"name is Slowakei\", function() {",
											"    pm.expect(state.name).to.equal(\"Slowakei\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Slowakei\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create belgium",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Belgien\", function() {",
											"    pm.expect(state.name).to.equal(\"Belgien\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Belgien\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create bulgaria",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Bulgarien\", function() {",
											"    pm.expect(state.name).to.equal(\"Bulgarien\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Bulgarien\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create denmark",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Dänemark\", function() {",
											"    pm.expect(state.name).to.equal(\"Dänemark\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Dänemark\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create estonia",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Estland\", function() {",
											"    pm.expect(state.name).to.equal(\"Estland\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Estland\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create finland",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Finnland\", function() {",
											"    pm.expect(state.name).to.equal(\"Finnland\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Finnland\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create france",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Frankreich\", function() {",
											"    pm.expect(state.name).to.equal(\"Frankreich\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Frankreich\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create greece",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Griechenland\", function() {",
											"    pm.expect(state.name).to.equal(\"Griechenland\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Griechenland\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create united kingdom",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Großbritannien\", function() {",
											"    pm.expect(state.name).to.equal(\"Großbritannien\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Großbritannien\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create ireland",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Irland\", function() {",
											"    pm.expect(state.name).to.equal(\"Irland\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Irland\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create italy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Italien\", function() {",
											"    pm.expect(state.name).to.equal(\"Italien\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Italien\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create croatia",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Kroatien\", function() {",
											"    pm.expect(state.name).to.equal(\"Kroatien\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Kroatien\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create liechtenstein",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Liechtenstein\", function() {",
											"    pm.expect(state.name).to.equal(\"Liechtenstein\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Liechtenstein\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create latvia",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Lettland\", function() {",
											"    pm.expect(state.name).to.equal(\"Lettland\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Lettland\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create luxembourg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Luxemburg\", function() {",
											"    pm.expect(state.name).to.equal(\"Luxemburg\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Luxemburg\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create lithuania",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Litauen\", function() {",
											"    pm.expect(state.name).to.equal(\"Litauen\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Litauen\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create malta",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Malta\", function() {",
											"    pm.expect(state.name).to.equal(\"Malta\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Malta\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create netherlands",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Niederlande\", function() {",
											"    pm.expect(state.name).to.equal(\"Niederlande\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Niederlande\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create norway",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Norwegen\", function() {",
											"    pm.expect(state.name).to.equal(\"Norwegen\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Norwegen\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create poland",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Polen\", function() {",
											"    pm.expect(state.name).to.equal(\"Polen\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Polen\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create romania",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Rumänien\", function() {",
											"    pm.expect(state.name).to.equal(\"Rumänien\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Rumänien\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create sweden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Schweden\", function() {",
											"    pm.expect(state.name).to.equal(\"Schweden\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Schweden\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create cyprus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Zypern\", function() {",
											"    pm.expect(state.name).to.equal(\"Zypern\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Zypern\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create slovakia",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Slowakei\", function() {",
											"    pm.expect(state.name).to.equal(\"Slowakei\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Slowakei\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create slovenia",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Slowenien\", function() {",
											"    pm.expect(state.name).to.equal(\"Slowenien\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Slowenien\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create czech republic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Tschechien\", function() {",
											"    pm.expect(state.name).to.equal(\"Tschechien\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Tschechien\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create spain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Spanien\", function() {",
											"    pm.expect(state.name).to.equal(\"Spanien\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Spanien\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create hungary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Ungarn\", function() {",
											"    pm.expect(state.name).to.equal(\"Ungarn\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Ungarn\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create portugal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Portugal\", function() {",
											"    pm.expect(state.name).to.equal(\"Portugal\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Portugal\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create switzerland",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Schweiz\", function() {",
											"    pm.expect(state.name).to.equal(\"Schweiz\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Schweiz\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "create germany",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var state;",
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"    state = pm.response.json();",
											"})",
											"",
											"pm.test(\"name is Deutschland\", function() {",
											"    pm.expect(state.name).to.equal(\"Deutschland\");",
											"})",
											"",
											"pm.test(\"zone id is parent\", function() {",
											"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
											"})",
											"",
											"pm.test(\"zone name is parent\", function() {",
											"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
											"})",
											"",
											"pm.test(\"store state id\", function() {",
											"    pm.environment.set(\"state_id\", state.id);",
											"})",
											"",
											"pm.test(\"zone shipping is parent\", function() {",
											"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Deutschland\",\n    \"zoneId\": {{zone_id}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api}}/meta/states",
									"host": [
										"{{api}}"
									],
									"path": [
										"meta",
										"states"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{jwt}}",
						"type": "string"
					}
				]
			}
		},
		{
			"name": "accounts",
			"item": [
				{
					"name": "create markus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var bod;",
									"var adr;",
									"",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    bod = pm.response.json();",
									"    adr = bod.identity.address;",
									"})",
									"",
									"pm.test(\"username\", function() {",
									"    pm.expect(bod.username, \"markus\");",
									"})",
									"",
									"pm.test(\"salutation\", function() {",
									"    pm.expect(bod.identity.salutation, \"Herr\");",
									"})",
									"",
									"pm.test(\"firstName\", function() {",
									"    pm.expect(bod.identity.firstName, \"Markus\");",
									"})",
									"",
									"pm.test(\"lastName\", function() {",
									"    pm.expect(bod.identity.lastName, \"Nentwich\");",
									"})",
									"",
									"pm.test(\"company\", function() {",
									"    pm.expect(bod.identity.company, \"Musikverein Leopoldsdorf\");",
									"})",
									"",
									"pm.test(\"email\", function() {",
									"    pm.expect(bod.identity.email, \"kontakt@markus-nentwich.at\");",
									"})",
									"",
									"pm.test(\"telephone\", function() {",
									"    pm.expect(bod.identity.telephone, \"0043699 10329882\");",
									"})",
									"",
									"pm.test(\"street\", function() {",
									"    pm.expect(adr.street, \"Vereinsgasse\");",
									"})",
									"",
									"pm.test(\"streetNumber\", function() {",
									"    pm.expect(adr.streetNumber, \"25/14\");",
									"})",
									"",
									"pm.test(\"postcode\", function() {",
									"    pm.expect(adr.postcode, \"1020\");",
									"})",
									"",
									"pm.test(\"city\", function() {",
									"    pm.expect(adr.city, \"Wien\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"markus\",\n  \"password\": \"{{markus_password}}\",\n  \"identity\": {\n    \"salutation\": \"Herr\",\n    \"firstName\": \"Markus\",\n    \"lastName\": \"Nentwich\",\n    \"company\": \"Musikverein Leopoldsdorf\",\n    \"email\": \"kontakt@markus-nentwich.at\",\n    \"telephone\": \"0043699 10329882\",\n    \"address\": {\n      \"city\": \"Wien\",\n      \"postCode\": \"1020\",\n      \"street\": \"Vereinsgasse\",\n      \"streetNumber\": \"25/14\",\n      \"stateId\": {{austria_id}}\n    }\n  },\n  \"state\": \"active\",\n  \"roles\": [\n    {\n      \"name\": \"owner\"\n    },\n    {\n        \"name\": \"catalogue\"\n    },\n    {\n        \"name\": \"asset\"\n    },\n    {\n        \"name\": \"order\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/accounts/users",
							"host": [
								"{{api}}"
							],
							"path": [
								"accounts",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "create dennis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"dennis\",\n  \"password\": \"{{dennis_password}}\",\n  \"identity\": {\n    \"salutation\": \"Herr\",\n    \"firstName\": \"Dennis\",\n    \"lastName\": \"\",\n    \"company\": \"Musikverein Leopoldsdorf\",\n    \"email\": \"{{dennis_email}}\",\n    \"telephone\": \"\",\n    \"address\": {\n      \"city\": \"\",\n      \"postCode\": \"\",\n      \"street\": \"\",\n      \"streetNumber\": \"\",\n      \"stateId\": {{austria_id}}\n    }\n  },\n  \"state\": \"active\",\n  \"roles\": [\n    {\n      \"name\": \"monitor\"\n    },\n    {\n      \"name\": \"root\"\n    },\n    {\n        \"name\": \"catalogue\"\n    },\n    {\n        \"name\": \"asset\"\n    },\n    {\n        \"name\": \"order\"\n    },\n    {\n        \"name\": \"meta\"\n    },\n    {\n        \"name\": \"account\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/accounts/users",
							"host": [
								"{{api}}"
							],
							"path": [
								"accounts",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "create richi",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"richi\",\n  \"password\": \"{{richi_password}}\",\n  \"identity\": {\n    \"salutation\": \"Herr\",\n    \"firstName\": \"Richard\",\n    \"lastName\": \"\",\n    \"company\": \"Musikverein Leopoldsdorf\",\n    \"email\": \"{{richi_email}}\",\n    \"telephone\": \"\",\n    \"address\": {\n      \"city\": \"\",\n      \"postCode\": \"\",\n      \"street\": \"\",\n      \"streetNumber\": \"\",\n      \"stateId\": {{austria_id}}\n    }\n  },\n  \"state\": \"active\",\n  \"roles\": [\n    {\n      \"name\": \"monitor\"\n    },\n    {\n      \"name\": \"root\"\n    },\n    {\n        \"name\": \"catalogue\"\n    },\n    {\n        \"name\": \"asset\"\n    },\n    {\n        \"name\": \"order\"\n    },\n    {\n        \"name\": \"meta\"\n    },\n    {\n        \"name\": \"account\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/accounts/users",
							"host": [
								"{{api}}"
							],
							"path": [
								"accounts",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "markus login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"storing jwt\", function() {",
									"    pm.response.to.have.header(\"Authorization\")",
									"    var token = pm.response.headers.get(\"Authorization\");",
									"    pm.environment.set(\"jwt\", token.replace(\"Bearer \", \"\"))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{markus_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "markus",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/accounts/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "dennis login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"storing jwt\", function() {",
									"    pm.response.to.have.header(\"Authorization\")",
									"    var token = pm.response.headers.get(\"Authorization\");",
									"    pm.environment.set(\"jwt\", token.replace(\"Bearer \", \"\"))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{dennis_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "dennis",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/accounts/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "richi login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"storing jwt\", function() {",
									"    pm.response.to.have.header(\"Authorization\")",
									"    var token = pm.response.headers.get(\"Authorization\");",
									"    pm.environment.set(\"jwt\", token.replace(\"Bearer \", \"\"))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{richi_password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "richi",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/accounts/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "change root roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/accounts/users/root/roles",
							"host": [
								"{{api}}"
							],
							"path": [
								"accounts",
								"users",
								"root",
								"roles"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "catalogue",
			"item": [
				{
					"name": "get catalogue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var category;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    category = pm.response.json();",
									"})",
									"",
									"pm.test(\"store id\", function() {",
									"    pm.environment.set(\"category_root_id\", category.id);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/catalogue",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue"
							]
						}
					},
					"response": []
				},
				{
					"name": "polka",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var category;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    category = pm.response.json();",
									"})",
									"",
									"pm.test(\"store id\", function() {",
									"    pm.environment.set(\"category_polka_id\", category.id);",
									"})",
									"",
									"pm.test(\"name is Polka\", function() {",
									"    pm.expect(category.name).to.equal(\"Polka\");",
									"    pm.environment.set(\"category_polka_name\", category.name);",
									"})",
									"",
									"pm.test(\"namePlural is Polka\", function() {",
									"    pm.expect(category.namePlural).to.equal(\"Polka\");",
									"    pm.environment.set(\"category_polka_namePlural\", category.namePlural);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Polka\",\n    \"namePlural\": \"Polka\",\n    \"parentId\": {{category_root_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/catalogue/categories",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "letzte runde klein",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var score;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    score = pm.response.json();",
									"})",
									"",
									"pm.test(\"store march id\", function() {",
									"    pm.environment.set(\"score_id\", score.id);",
									"})",
									"",
									"pm.test(\"group type\", function() {",
									"    pm.expect(score.groupType).to.equal(\"kleine Besetzung\");",
									"})",
									"",
									"pm.test(\"author\", function() {",
									"    pm.expect(score.author).to.equal(\"Markus Nentwich\");",
									"})",
									"",
									"pm.test(\"title\", function() {",
									"    pm.expect(score.title, \"Eine letzte Runde\");",
									"    pm.environment.set(\"score_title\", score.title);",
									"})",
									"",
									"pm.test(\"instrumentation\", function() {",
									"    pm.expect(score.instrumentation, \"Klarinette in Es, Klarinette 1 in B, Klarinette 2 in B, Flügelhorn 1, Flügelhorn 2, Tenorhorn in B, Bariton in B und C, Trompete 1 in B, Trompete 2 in B und Es, Trompete 3 in B und Es, Posaune 1 in B und C, Posaune 2 in B und C, Posaune 3 in B und C, Melodieposaune in B und C, Tuba, Schlagwerk\");",
									"    pm.environment.set(\"score_instrumentation\", score.instrumentation);",
									"})",
									"",
									"pm.test(\"difficulty\", function() {",
									"    pm.expect(score.difficulty, 4);",
									"    pm.environment.set(\"score_difficulty\", score.difficulty);",
									"})",
									"",
									"pm.test(\"price\", function() {",
									"    pm.expect(score.price, 3900);",
									"    pm.environment.set(\"score_price\", score.price);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Eine letzte Runde\",\n    \"author\": \"Markus Nentwich\",\n    \"groupType\": \"kleine Besetzung\",\n    \"summary\": \"Eine leichte Kapellenpolka über die Luft im Marchfeld\",\n    \"price\": 3900,\n    \"difficulty\": 4,\n    \"instrumentation\": \"Klarinette in Es, Klarinette 1 in B, Klarinette 2 in B, Flügelhorn 1, Flügelhorn 2, Tenorhorn in B, Bariton in B und C, Trompete 1 in B, Trompete 2 in B und Es, Trompete 3 in B und Es, Posaune 1 in B und C, Posaune 2 in B und C, Posaune 3 in B und C, Melodieposaune in B und C, Tuba, Schlagwerk\",\n    \"categoryId\": {{category_polka_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/catalogue/scores",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"scores"
							]
						}
					},
					"response": []
				},
				{
					"name": "letzte runde klein neue stufe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var score;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    score = pm.response.json();",
									"})",
									"",
									"pm.test(\"store march id\", function() {",
									"    pm.environment.set(\"score_id\", score.id);",
									"})",
									"",
									"pm.test(\"group type\", function() {",
									"    pm.expect(score.groupType).to.equal(\"kleine Besetzung\");",
									"})",
									"",
									"pm.test(\"author\", function() {",
									"    pm.expect(score.author).to.equal(\"Markus Nentwich\");",
									"})",
									"",
									"pm.test(\"title\", function() {",
									"    pm.expect(score.title, \"Eine letzte Runde\");",
									"    pm.environment.set(\"score_title\", score.title);",
									"})",
									"",
									"pm.test(\"instrumentation\", function() {",
									"    pm.expect(score.instrumentation, \"Klarinette in Es, Klarinette 1 in B, Klarinette 2 in B, Flügelhorn 1, Flügelhorn 2, Tenorhorn in B, Bariton in B und C, Trompete 1 in B, Trompete 2 in B und Es, Trompete 3 in B und Es, Posaune 1 in B und C, Posaune 2 in B und C, Posaune 3 in B und C, Melodieposaune in B und C, Tuba, Schlagwerk\");",
									"    pm.environment.set(\"score_instrumentation\", score.instrumentation);",
									"})",
									"",
									"pm.test(\"difficulty\", function() {",
									"    pm.expect(score.difficulty, 4);",
									"    pm.environment.set(\"score_difficulty\", score.difficulty);",
									"})",
									"",
									"pm.test(\"price\", function() {",
									"    pm.expect(score.price, 3900);",
									"    pm.environment.set(\"score_price\", score.price);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n                    \"author\": \"Markus Nentwich\",\n                    \"categoryId\": 46,\n                    \"difficulty\": 5,\n                    \"groupType\": \"böhmische Besetzung\",\n                    \"instrumentation\": \"Klarinette in Es, Klarinette 1 in B, Klarinette 2 in B, Flügelhorn 1, Flügelhorn 2, Tenorhorn in B, Bariton in B und C, Trompete 1 in B, Trompete 2 in B und Es, Trompete 3 in B und Es, Posaune 1 in B und C, Posaune 2 in B und C, Posaune 3 in B und C, Melodieposaune in B und C, Tuba, Schlagwerk\",\n                    \"price\": 3900,\n                    \"quantity\": null,\n                    \"title\": \"Eine letzte Runde\",\n                    \"summary\": \"© Nentwich Verlag\",\n                    \"description\": \"Mit „Eine letzte Runde“ ist Markus Nentwich ein wahrer Hit am Blasmusiksektor gelungen. Dem ersten Teil im Egerländer Stil folgt ein Trio mit Ohrwurmgarantie, ein sinfonischer Mittelteil und ein Grandioso. Das Arrangement der Kaiser Musikanten ist zwar ein wahrer „Lippenfresser“, das Publikum weiß es aber zu schätzen.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/catalogue/scores/47",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"scores",
								"47"
							]
						}
					},
					"response": []
				},
				{
					"name": "letzte runde neue stufe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var score;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    score = pm.response.json();",
									"})",
									"",
									"pm.test(\"store march id\", function() {",
									"    pm.environment.set(\"score_id\", score.id);",
									"})",
									"",
									"pm.test(\"group type\", function() {",
									"    pm.expect(score.groupType).to.equal(\"kleine Besetzung\");",
									"})",
									"",
									"pm.test(\"author\", function() {",
									"    pm.expect(score.author).to.equal(\"Markus Nentwich\");",
									"})",
									"",
									"pm.test(\"title\", function() {",
									"    pm.expect(score.title, \"Eine letzte Runde\");",
									"    pm.environment.set(\"score_title\", score.title);",
									"})",
									"",
									"pm.test(\"instrumentation\", function() {",
									"    pm.expect(score.instrumentation, \"Klarinette in Es, Klarinette 1 in B, Klarinette 2 in B, Flügelhorn 1, Flügelhorn 2, Tenorhorn in B, Bariton in B und C, Trompete 1 in B, Trompete 2 in B und Es, Trompete 3 in B und Es, Posaune 1 in B und C, Posaune 2 in B und C, Posaune 3 in B und C, Melodieposaune in B und C, Tuba, Schlagwerk\");",
									"    pm.environment.set(\"score_instrumentation\", score.instrumentation);",
									"})",
									"",
									"pm.test(\"difficulty\", function() {",
									"    pm.expect(score.difficulty, 4);",
									"    pm.environment.set(\"score_difficulty\", score.difficulty);",
									"})",
									"",
									"pm.test(\"price\", function() {",
									"    pm.expect(score.price, 3900);",
									"    pm.environment.set(\"score_price\", score.price);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"author\": \"Markus Nentwich\",\n                    \"categoryId\": 46,\n                    \"difficulty\": 3,\n                    \"groupType\": \"Blasorchester\",\n                    \"instrumentation\": \"Particell in C, Flöte in C, Oboe in C, Klarinette in Es, Klarinette 1 in B, Klarinette 2 in B, Klarinette 3 in B, Bassklarinette in B, Altsaxophon 1 in Es, Altsaxophon 2 in Es, Tenorsaxophon 1 in B, Tenorsaxophon 2 in B, Baritonsaxophon in Es, Fagott in C, Flügelhorn 1, Flügelhorn 2, Trompete 1 in B, Trompete 2 in B, Trompete 3 in B, Horn 1 in F und Es, Horn 2 in F und Es, Horn 3 in F und Es, Horn 4 in F und Es, Tenorhorn in B, Bariton in B und C, Posaune 1 in B und C, Posaune 2 in B und C, Posaune 3 in B und C, Bass 1 in C, Bass 2 in C, Bass in Es, Bass in B, Schlagwerk, Glockenspiel\",\n                    \"price\": 4900,\n                    \"quantity\": null,\n                    \"title\": \"Eine letzte Runde\",\n                    \"summary\": \"© Nentwich Verlag\",\n                    \"description\": \"Mit „Eine letzte Runde“ ist Markus Nentwich ein wahrer Hit am Blasmusiksektor gelungen. Dem ersten Teil im Egerländer Stil folgt ein Trio mit Ohrwurmgarantie, ein sinfonischer Mittelteil und ein Grandioso. Das Blasorchesterarrangement wirkt gleichermaßen nicht nur bei Konzerten, sondern auch bei Früh- und Dämmerschoppen.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/catalogue/scores/48",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"scores",
								"48"
							]
						}
					},
					"response": []
				},
				{
					"name": "sonnenhof",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var score;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    score = pm.response.json();",
									"})",
									"",
									"pm.test(\"store march id\", function() {",
									"    pm.environment.set(\"score_id\", score.id);",
									"})",
									"",
									"pm.test(\"group type\", function() {",
									"    pm.expect(score.groupType).to.equal(\"kleine Besetzung\");",
									"})",
									"",
									"pm.test(\"author\", function() {",
									"    pm.expect(score.author).to.equal(\"Markus Nentwich\");",
									"})",
									"",
									"pm.test(\"title\", function() {",
									"    pm.expect(score.title, \"Eine letzte Runde\");",
									"    pm.environment.set(\"score_title\", score.title);",
									"})",
									"",
									"pm.test(\"instrumentation\", function() {",
									"    pm.expect(score.instrumentation, \"Klarinette in Es, Klarinette 1 in B, Klarinette 2 in B, Flügelhorn 1, Flügelhorn 2, Tenorhorn in B, Bariton in B und C, Trompete 1 in B, Trompete 2 in B und Es, Trompete 3 in B und Es, Posaune 1 in B und C, Posaune 2 in B und C, Posaune 3 in B und C, Melodieposaune in B und C, Tuba, Schlagwerk\");",
									"    pm.environment.set(\"score_instrumentation\", score.instrumentation);",
									"})",
									"",
									"pm.test(\"difficulty\", function() {",
									"    pm.expect(score.difficulty, 4);",
									"    pm.environment.set(\"score_difficulty\", score.difficulty);",
									"})",
									"",
									"pm.test(\"price\", function() {",
									"    pm.expect(score.price, 3900);",
									"    pm.environment.set(\"score_price\", score.price);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Besuch am Sonnenhof\",\n    \"author\": \"Markus Nentwich\",\n    \"groupType\": \"7er/8er Besetzung\",\n    \"summary\": \"© Nentwich Verlag\",\n    \"description\": \"Eine flotte Polka von Markus Nentwich, bei der seine geographische Nähe zu Tschechien und sein Faible für modernere Harmonien aufeinanderprallen. Perfekt für die Formation Viera Blech, zu hören auf der 2022 erschienen CD „Typisch Untypisch“.\",\n    \"price\": 2290,\n    \"difficulty\": 4,\n    \"instrumentation\": \"Flügelhorn 1 in B, Flügelhorn 2 in B, Trompete in B, Tenorhorn in B, Bariton in B und C, Tuba in B und C, Schlagwerk\",\n    \"categoryId\": {{category_polka_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/catalogue/scores",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"scores"
							]
						}
					},
					"response": []
				},
				{
					"name": "create konzertmarsch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var category;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    category = pm.response.json();",
									"})",
									"",
									"pm.test(\"store id\", function() {",
									"    pm.environment.set(\"category_id\", category.id);",
									"})",
									"",
									"pm.test(\"name is Marsch\", function() {",
									"    pm.expect(category.name).to.equal(\"Marsch\");",
									"    pm.environment.set(\"category_name\", category.name);",
									"})",
									"",
									"pm.test(\"namePlural is Märsche\", function() {",
									"    pm.expect(category.namePlural).to.equal(\"Märsche\");",
									"    pm.environment.set(\"category_namePlural\", category.namePlural);",
									"})",
									"",
									"/*pm.test(\"parent is root\", function() {",
									"    pm.expect(category.parent.id).to.equal(pm.environment.get(\"category_root_id\"));",
									"})*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Konzertmarsch\",\n    \"namePlural\": \"Konzertmärsche\",\n    \"parentId\": {{category_root_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/catalogue/categories",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "galaxien",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var score;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    score = pm.response.json();",
									"})",
									"",
									"pm.test(\"store march id\", function() {",
									"    pm.environment.set(\"score_id\", score.id);",
									"})",
									"",
									"pm.test(\"group type\", function() {",
									"    pm.expect(score.groupType).to.equal(\"kleine Besetzung\");",
									"})",
									"",
									"pm.test(\"author\", function() {",
									"    pm.expect(score.author).to.equal(\"Markus Nentwich\");",
									"})",
									"",
									"pm.test(\"title\", function() {",
									"    pm.expect(score.title, \"Eine letzte Runde\");",
									"    pm.environment.set(\"score_title\", score.title);",
									"})",
									"",
									"pm.test(\"instrumentation\", function() {",
									"    pm.expect(score.instrumentation, \"Klarinette in Es, Klarinette 1 in B, Klarinette 2 in B, Flügelhorn 1, Flügelhorn 2, Tenorhorn in B, Bariton in B und C, Trompete 1 in B, Trompete 2 in B und Es, Trompete 3 in B und Es, Posaune 1 in B und C, Posaune 2 in B und C, Posaune 3 in B und C, Melodieposaune in B und C, Tuba, Schlagwerk\");",
									"    pm.environment.set(\"score_instrumentation\", score.instrumentation);",
									"})",
									"",
									"pm.test(\"difficulty\", function() {",
									"    pm.expect(score.difficulty, 4);",
									"    pm.environment.set(\"score_difficulty\", score.difficulty);",
									"})",
									"",
									"pm.test(\"price\", function() {",
									"    pm.expect(score.price, 3900);",
									"    pm.environment.set(\"score_price\", score.price);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Marsch der Galaxien\",\n    \"author\": \"Markus Nentwich\",\n    \"groupType\": \"7er/8er Besetzung\",\n    \"summary\": \"© Nentwich Verlag\",\n    \"price\": 2290,\n    \"difficulty\": 3,\n    \"instrumentation\": \"Flügelhorn 1 in B, Flügelhorn 2 in B, Trompete in B, Tenorhorn in B, Bariton in B und C, Tuba in B und C, Schlagwerk\",\n    \"categoryId\": 545\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/catalogue/scores",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"scores"
							]
						}
					},
					"response": []
				},
				{
					"name": "zwetschkerl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var score;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    score = pm.response.json();",
									"})",
									"",
									"pm.test(\"store march id\", function() {",
									"    pm.environment.set(\"score_id\", score.id);",
									"})",
									"",
									"pm.test(\"group type\", function() {",
									"    pm.expect(score.groupType).to.equal(\"kleine Besetzung\");",
									"})",
									"",
									"pm.test(\"author\", function() {",
									"    pm.expect(score.author).to.equal(\"Markus Nentwich\");",
									"})",
									"",
									"pm.test(\"title\", function() {",
									"    pm.expect(score.title, \"Eine letzte Runde\");",
									"    pm.environment.set(\"score_title\", score.title);",
									"})",
									"",
									"pm.test(\"instrumentation\", function() {",
									"    pm.expect(score.instrumentation, \"Klarinette in Es, Klarinette 1 in B, Klarinette 2 in B, Flügelhorn 1, Flügelhorn 2, Tenorhorn in B, Bariton in B und C, Trompete 1 in B, Trompete 2 in B und Es, Trompete 3 in B und Es, Posaune 1 in B und C, Posaune 2 in B und C, Posaune 3 in B und C, Melodieposaune in B und C, Tuba, Schlagwerk\");",
									"    pm.environment.set(\"score_instrumentation\", score.instrumentation);",
									"})",
									"",
									"pm.test(\"difficulty\", function() {",
									"    pm.expect(score.difficulty, 4);",
									"    pm.environment.set(\"score_difficulty\", score.difficulty);",
									"})",
									"",
									"pm.test(\"price\", function() {",
									"    pm.expect(score.price, 3900);",
									"    pm.environment.set(\"score_price\", score.price);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Švestka - das Zwetschkerl\",\n    \"author\": \"Markus Nentwich\",\n    \"groupType\": \"Blasorchester\",\n    \"summary\": \"© Nentwich Verlag\",\n    \"price\": 3900,\n    \"difficulty\": 2,\n    \"description\": \"POLKABUCHFORMAT Die 2022 erschienene Polka widmete Markus Nentwich seiner Nichte Lea. Einfach, gemütlich und leicht für Blasorchester zu spielen erinnert dieses Stück an Böhmen von früher. Zu hören auf der CD „Leise wird es nie…“ von „eine kleine Dorfmusik“.\",\n    \"instrumentation\": \"Melodie in B und C, Flöte in C, Klarinette in Es, Klarinette 1 in B, Klarinette 2 in B, Klarinette 3 in B, Bassklarinette in B, Fagott in C, Altsaxophon 1 in Es, Altsaxophon 2 in Es, Tenorsaxophon 1 in B, Tenorsaxophon 2 in B, Baritonsaxophon in Es, Flügelhorn 1, Flügelhorn 2, Trompete 1 in B, Trompete 2 in B, Trompete 3 in B, Horn 1 in F und Es, Horn 2 in F und Es, Horn 3 in F und Es, Tenorhorn in B, Bariton in B und C, Posaune 1 in B und C, Posaune 2 in B und C, Posaune 3 in B und C, Bass 1 in C, Bass 2 in C, Bass in Es, Bass in B, Schlagwerk\",\n    \"categoryId\": 46\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/catalogue/scores",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"scores"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete castaldo Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status is ok\", function() {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api}}/catalogue/scores/515",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"scores",
								"515"
							]
						}
					},
					"response": []
				},
				{
					"name": "create pdf Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var score;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    score = pm.response.json();",
									"})",
									"",
									"pm.test(\"store polka id\", function() {",
									"    pm.environment.set(\"score_polka_id\", score.id);",
									"})",
									"",
									"pm.test(\"title is Smutná Milenka\", function() {",
									"    pm.expect(score.title).to.equal(\"Smutná Milenka\");",
									"    pm.environment.set(\"score_polka_title\", score.title);",
									"})",
									"",
									"pm.test(\"group type is Blasorchester\", function() {",
									"    pm.expect(score.groupType).to.equal(\"Blasorchester\");",
									"})",
									"",
									"pm.test(\"author is Paevl Heidinger\", function() {",
									"    pm.expect(score.author).to.equal(\"Pavel Heidinger\");",
									"})",
									"",
									"pm.test(\"instrumentation is Behmisch\", function() {",
									"    pm.expect(score.instrumentation).to.equal(\"Behmisch\");",
									"    pm.environment.set(\"score_polka_instrumentation\", score.instrumentation);",
									"})",
									"",
									"pm.test(\"difficulty is 2\", function() {",
									"    pm.expect(score.difficulty).to.equal(2);",
									"    pm.environment.set(\"score_polka_difficulty\", score.difficulty);",
									"})",
									"",
									"pm.test(\"price is 4100\", function() {",
									"    pm.expect(score.price).to.equal(4100);",
									"    pm.environment.set(\"score_polka_price\", score.price);",
									"})",
									"",
									"/*pm.test(\"category is polka\", function() {",
									"    pm.expect(score.category.id).to.equal(pm.environment.get(\"category_polka_id\"));",
									"    pm.expect(score.category.name).to.equal(pm.environment.get(\"category_polka_name\"));",
									"    pm.expect(score.category.namePlural).to.equal(pm.environment.get(\"category_polka_namePlural\"));",
									"})*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "file",
							"file": {
								"src": "/home/richi/Downloads/Besuch am Sonnenhof Online.pdf"
							},
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/assets/scores/516/pdf",
							"host": [
								"{{api}}"
							],
							"path": [
								"assets",
								"scores",
								"516",
								"pdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "create galaxien pdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var score;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    score = pm.response.json();",
									"})",
									"",
									"pm.test(\"store polka id\", function() {",
									"    pm.environment.set(\"score_polka_id\", score.id);",
									"})",
									"",
									"pm.test(\"title is Smutná Milenka\", function() {",
									"    pm.expect(score.title).to.equal(\"Smutná Milenka\");",
									"    pm.environment.set(\"score_polka_title\", score.title);",
									"})",
									"",
									"pm.test(\"group type is Blasorchester\", function() {",
									"    pm.expect(score.groupType).to.equal(\"Blasorchester\");",
									"})",
									"",
									"pm.test(\"author is Paevl Heidinger\", function() {",
									"    pm.expect(score.author).to.equal(\"Pavel Heidinger\");",
									"})",
									"",
									"pm.test(\"instrumentation is Behmisch\", function() {",
									"    pm.expect(score.instrumentation).to.equal(\"Behmisch\");",
									"    pm.environment.set(\"score_polka_instrumentation\", score.instrumentation);",
									"})",
									"",
									"pm.test(\"difficulty is 2\", function() {",
									"    pm.expect(score.difficulty).to.equal(2);",
									"    pm.environment.set(\"score_polka_difficulty\", score.difficulty);",
									"})",
									"",
									"pm.test(\"price is 4100\", function() {",
									"    pm.expect(score.price).to.equal(4100);",
									"    pm.environment.set(\"score_polka_price\", score.price);",
									"})",
									"",
									"/*pm.test(\"category is polka\", function() {",
									"    pm.expect(score.category.id).to.equal(pm.environment.get(\"category_polka_id\"));",
									"    pm.expect(score.category.name).to.equal(pm.environment.get(\"category_polka_name\"));",
									"    pm.expect(score.category.namePlural).to.equal(pm.environment.get(\"category_polka_namePlural\"));",
									"})*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "file",
							"file": {
								"src": "/home/richi/Downloads/Marsch der Galaxien Online.pdf"
							},
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/assets/scores/546/pdf",
							"host": [
								"{{api}}"
							],
							"path": [
								"assets",
								"scores",
								"546",
								"pdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "create zwetschkerl pdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var score;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    score = pm.response.json();",
									"})",
									"",
									"pm.test(\"store polka id\", function() {",
									"    pm.environment.set(\"score_polka_id\", score.id);",
									"})",
									"",
									"pm.test(\"title is Smutná Milenka\", function() {",
									"    pm.expect(score.title).to.equal(\"Smutná Milenka\");",
									"    pm.environment.set(\"score_polka_title\", score.title);",
									"})",
									"",
									"pm.test(\"group type is Blasorchester\", function() {",
									"    pm.expect(score.groupType).to.equal(\"Blasorchester\");",
									"})",
									"",
									"pm.test(\"author is Paevl Heidinger\", function() {",
									"    pm.expect(score.author).to.equal(\"Pavel Heidinger\");",
									"})",
									"",
									"pm.test(\"instrumentation is Behmisch\", function() {",
									"    pm.expect(score.instrumentation).to.equal(\"Behmisch\");",
									"    pm.environment.set(\"score_polka_instrumentation\", score.instrumentation);",
									"})",
									"",
									"pm.test(\"difficulty is 2\", function() {",
									"    pm.expect(score.difficulty).to.equal(2);",
									"    pm.environment.set(\"score_polka_difficulty\", score.difficulty);",
									"})",
									"",
									"pm.test(\"price is 4100\", function() {",
									"    pm.expect(score.price).to.equal(4100);",
									"    pm.environment.set(\"score_polka_price\", score.price);",
									"})",
									"",
									"/*pm.test(\"category is polka\", function() {",
									"    pm.expect(score.category.id).to.equal(pm.environment.get(\"category_polka_id\"));",
									"    pm.expect(score.category.name).to.equal(pm.environment.get(\"category_polka_name\"));",
									"    pm.expect(score.category.namePlural).to.equal(pm.environment.get(\"category_polka_namePlural\"));",
									"})*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "file",
							"file": {
								"src": "/home/richi/Downloads/Marsch der Galaxien Online.pdf"
							},
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/assets/scores/546/pdf",
							"host": [
								"{{api}}"
							],
							"path": [
								"assets",
								"scores",
								"546",
								"pdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "create audio mp3 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "file",
							"file": {
								"src": "/home/richi/Downloads/Besuch am Sonnenhof - Hörprobe.mp3"
							}
						},
						"url": {
							"raw": "{{api}}/assets/scores/516/audio",
							"host": [
								"{{api}}"
							],
							"path": [
								"assets",
								"scores",
								"516",
								"audio"
							]
						}
					},
					"response": []
				},
				{
					"name": "create audio mp3 galaxien",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "file",
							"file": {
								"src": "/home/richi/Downloads/Besuch am Sonnenhof - Hörprobe.mp3"
							}
						},
						"url": {
							"raw": "{{api}}/assets/scores/546/audio",
							"host": [
								"{{api}}"
							],
							"path": [
								"assets",
								"scores",
								"546",
								"audio"
							]
						}
					},
					"response": []
				},
				{
					"name": "create audio mp3 zwetschkerl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "file",
							"file": {
								"src": "/home/richi/Downloads/Besuch am Sonnenhof - Hörprobe.mp3"
							}
						},
						"url": {
							"raw": "{{api}}/assets/scores/546/audio",
							"host": [
								"{{api}}"
							],
							"path": [
								"assets",
								"scores",
								"546",
								"audio"
							]
						}
					},
					"response": []
				},
				{
					"name": "letzte runde gross",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var score;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    score = pm.response.json();",
									"})",
									"",
									"pm.test(\"store march id\", function() {",
									"    pm.environment.set(\"score_id\", score.id);",
									"})",
									"",
									"pm.test(\"group type\", function() {",
									"    pm.expect(score.groupType).to.equal(\"Blasorchester\");",
									"})",
									"",
									"pm.test(\"author\", function() {",
									"    pm.expect(score.author).to.equal(\"Markus Nentwich\");",
									"})",
									"",
									"pm.test(\"title\", function() {",
									"    pm.expect(score.title, \"Eine letzte Runde\");",
									"    pm.environment.set(\"score_title\", score.title);",
									"})",
									"",
									"pm.test(\"instrumentation\", function() {",
									"    pm.expect(score.instrumentation, \"Particell in C, Flöte in C, Oboe in C, Klarinette in Es, Klarinette 1 in B, Klarinette 2 in B, Klarinette 3 in B, Bassklarinette in B, Altsaxophon 1 in Es, Altsaxophon 2 in Es, Tenorsaxophon 1 in B, Tenorsaxophon 2 in B, Baritonsaxophon in Es, Fagott in C, Flügelhorn 1, Flügelhorn 2, Trompete 1 in B, Trompete 2 in B, Trompete 3 in B, Horn 1 in F und Es, Horn 2 in F und Es, Horn 3 in F und Es, Horn 4 in F und Es, Tenorhorn in B, Bariton in B und C, Posaune 1 in B und C, Posaune 2 in B und C, Posaune 3 in B und C, Bass 1 in C, Bass 2 in C, Bass in Es, Bass in B, Schlagwerk, Glockenspiel\");",
									"    pm.environment.set(\"score_instrumentation\", score.instrumentation);",
									"})",
									"",
									"pm.test(\"difficulty\", function() {",
									"    pm.expect(score.difficulty, 2);",
									"    pm.environment.set(\"score_difficulty\", score.difficulty);",
									"})",
									"",
									"pm.test(\"price\", function() {",
									"    pm.expect(score.price, 4900);",
									"    pm.environment.set(\"score_price\", score.price);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Eine letzte Runde\",\n    \"author\": \"Markus Nentwich\",\n    \"groupType\": \"Blasorchester\",\n    \"summary\": \"Eine leichte Kapellenpolka über die Luft im Marchfeld\",\n    \"price\": 4900,\n    \"difficulty\": 2,\n    \"instrumentation\": \"Particell in C, Flöte in C, Oboe in C, Klarinette in Es, Klarinette 1 in B, Klarinette 2 in B, Klarinette 3 in B, Bassklarinette in B, Altsaxophon 1 in Es, Altsaxophon 2 in Es, Tenorsaxophon 1 in B, Tenorsaxophon 2 in B, Baritonsaxophon in Es, Fagott in C, Flügelhorn 1, Flügelhorn 2, Trompete 1 in B, Trompete 2 in B, Trompete 3 in B, Horn 1 in F und Es, Horn 2 in F und Es, Horn 3 in F und Es, Horn 4 in F und Es, Tenorhorn in B, Bariton in B und C, Posaune 1 in B und C, Posaune 2 in B und C, Posaune 3 in B und C, Bass 1 in C, Bass 2 in C, Bass in Es, Bass in B, Schlagwerk, Glockenspiel\",\n    \"categoryId\": {{category_polka_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/catalogue/scores",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"scores"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "order",
			"item": [
				{
					"name": "Bill Collection",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/zip",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{api}}/orders/bills/collection?from=2023-08-07&to=2023-08-08&confirm=true",
							"host": [
								"{{api}}"
							],
							"path": [
								"orders",
								"bills",
								"collection"
							],
							"query": [
								{
									"key": "from",
									"value": "2023-08-07"
								},
								{
									"key": "to",
									"value": "2023-08-08"
								},
								{
									"key": "confirm",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}