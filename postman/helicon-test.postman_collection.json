{
	"info": {
		"_postman_id": "24fc0c74-5dc7-400f-a42a-7e7fa7023c0a",
		"name": "helicon-test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "accounts",
			"item": [
				{
					"name": "root-login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"storing jwt\", function() {",
									"    pm.response.to.have.header(\"Authorization\")",
									"    var token = pm.response.headers.get(\"Authorization\");",
									"    pm.environment.set(\"jwt\", token.replace(\"Bearer \", \"\"))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{rootpw}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "root",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/accounts/login",
							"host": [
								"{{api}}"
							],
							"path": [
								"accounts",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "meta-priviledged",
			"item": [
				{
					"name": "create eu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"name is EU\", function() {",
									"    pm.expect(pm.response.json().name).is.to.equal(\"EU\");",
									"})",
									"",
									"pm.test(\"shipping is 701\", function() {",
									"    pm.expect(pm.response.json().shipping).is.to.equal(701);",
									"})",
									"",
									"pm.test(\"store zone\", function() {",
									"    var zone = pm.response.json();",
									"    pm.environment.set(\"zone_id\", zone.id);",
									"    pm.environment.set(\"zone_name\",zone.name);",
									"    pm.environment.set(\"zone_shipping\", zone.shipping);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"EU\",\n    \"shipping\": 701\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/meta/zones",
							"host": [
								"{{api}}"
							],
							"path": [
								"meta",
								"zones"
							]
						}
					},
					"response": []
				},
				{
					"name": "create slovakia",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var state;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    state = pm.response.json();",
									"})",
									"",
									"pm.test(\"store id\", function() {",
									"    pm.environment.set(\"slovakia_id\", state.id);",
									"})",
									"",
									"pm.test(\"name is Slowakei\", function() {",
									"    pm.expect(state.name).to.equal(\"Slowakei\");",
									"})",
									"",
									"pm.test(\"zone id is parent\", function() {",
									"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
									"})",
									"",
									"pm.test(\"zone name is parent\", function() {",
									"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
									"})",
									"",
									"pm.test(\"zone shipping is parent\", function() {",
									"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Slowakei\",\n    \"zoneId\": {{zone_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/meta/states",
							"host": [
								"{{api}}"
							],
							"path": [
								"meta",
								"states"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete slovakia",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api}}/meta/states/{{slovakia_id}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"meta",
								"states",
								"{{slovakia_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create austria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var state;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    state = pm.response.json();",
									"})",
									"",
									"pm.test(\"name is Österreich\", function() {",
									"    pm.expect(state.name).to.equal(\"Österreich\");",
									"})",
									"",
									"pm.test(\"zone id is parent\", function() {",
									"    pm.expect(state.zone.id).to.equal(pm.environment.get(\"zone_id\"));",
									"})",
									"",
									"pm.test(\"zone name is parent\", function() {",
									"    pm.expect(state.zone.name).to.equal(pm.environment.get(\"zone_name\"));",
									"})",
									"",
									"pm.test(\"store state id\", function() {",
									"    pm.environment.set(\"state_id\", state.id);",
									"})",
									"",
									"pm.test(\"zone shipping is parent\", function() {",
									"    pm.expect(state.zone.shipping).to.equal(pm.environment.get(\"zone_shipping\"));",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Österreich\",\n    \"zoneId\": {{zone_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/meta/states",
							"host": [
								"{{api}}"
							],
							"path": [
								"meta",
								"states"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{jwt}}",
						"type": "string"
					}
				]
			}
		},
		{
			"name": "meta",
			"item": [
				{
					"name": "create eu",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(403);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"EU\",\n    \"shipping\": 701\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/meta/zones",
							"host": [
								"{{api}}"
							],
							"path": [
								"meta",
								"zones"
							]
						}
					},
					"response": []
				},
				{
					"name": "create austria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(403);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Österreich\",\n    \"zoneId\": {{zone_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/meta/states",
							"host": [
								"{{api}}"
							],
							"path": [
								"meta",
								"states"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete austria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status not ok\", function() {",
									"    pm.response.to.have.status(403);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api}}/meta/states/{{state_id}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"meta",
								"states",
								"{{state_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			}
		},
		{
			"name": "catalogue",
			"item": [
				{
					"name": "get catalogue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var category;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    category = pm.response.json();",
									"})",
									"",
									"pm.test(\"store id\", function() {",
									"    pm.environment.set(\"category_root_id\", category.id);",
									"})",
									"",
									"/*pm.test(\"parent is null\", function() {",
									"    pm.expect(category.parent).to.equal(null);",
									"})*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/catalogue",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue"
							]
						}
					},
					"response": []
				},
				{
					"name": "create marches unpriviledged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var category;",
									"pm.test(\"status forbidden\", function() {",
									"    pm.response.to.have.status(403);",
									"    category = pm.response.json();",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Marsch\",\n    \"namePlural\": \"Märsche\",\n    \"parentId\": {{category_root_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/catalogue/categories",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "create marches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var category;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    category = pm.response.json();",
									"})",
									"",
									"pm.test(\"store id\", function() {",
									"    pm.environment.set(\"category_id\", category.id);",
									"})",
									"",
									"pm.test(\"name is Marsch\", function() {",
									"    pm.expect(category.name).to.equal(\"Marsch\");",
									"    pm.environment.set(\"category_name\", category.name);",
									"})",
									"",
									"pm.test(\"namePlural is Märsche\", function() {",
									"    pm.expect(category.namePlural).to.equal(\"Märsche\");",
									"    pm.environment.set(\"category_namePlural\", category.namePlural);",
									"})",
									"",
									"/*pm.test(\"parent is root\", function() {",
									"    pm.expect(category.parent.id).to.equal(pm.environment.get(\"category_root_id\"));",
									"})*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Marsch\",\n    \"namePlural\": \"Märsche\",\n    \"parentId\": {{category_root_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/catalogue/categories",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "get marches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var category;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    category = pm.response.json();",
									"})",
									"",
									"pm.test(\"name is Marsch\", function() {",
									"    pm.expect(category.name).to.equal(\"Marsch\");",
									"})",
									"",
									"pm.test(\"namePlural is Märsche\", function() {",
									"    pm.expect(category.namePlural).to.equal(\"Märsche\");",
									"})",
									"",
									"/*pm.test(\"parent is root\", function() {",
									"    pm.expect(category.parent.id).to.equal(pm.environment.get(\"category_root_id\"));",
									"})*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/catalogue/categories/{{category_id}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"categories",
								"{{category_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete unpriviledged marches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status is forbidden\", function() {",
									"    pm.response.to.have.status(403);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api}}/catalogue/categories/{{category_id}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"categories",
								"{{category_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete marches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status is ok\", function() {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api}}/catalogue/categories/{{category_id}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"categories",
								"{{category_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create marches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var category;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    category = pm.response.json();",
									"})",
									"",
									"pm.test(\"store id\", function() {",
									"    pm.environment.set(\"category_id\", category.id);",
									"})",
									"",
									"pm.test(\"name is Marsch\", function() {",
									"    pm.expect(category.name).to.equal(\"Marsch\");",
									"    pm.environment.set(\"category_name\", category.name);",
									"})",
									"",
									"pm.test(\"namePlural is Märsche\", function() {",
									"    pm.expect(category.namePlural).to.equal(\"Märsche\");",
									"    pm.environment.set(\"category_namePlural\", category.namePlural);",
									"})",
									"",
									"/*pm.test(\"parent is root\", function() {",
									"    pm.expect(category.parent.id).to.equal(pm.environment.get(\"category_root_id\"));",
									"})*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Marsch\",\n    \"namePlural\": \"Märsche\",\n    \"parentId\": {{category_root_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/catalogue/categories",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "create behmische marches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var category;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    category = pm.response.json();",
									"})",
									"",
									"pm.test(\"store id\", function() {",
									"    pm.environment.set(\"category_behm_id\", category.id);",
									"})",
									"",
									"pm.test(\"name is behmischer Marsch\", function() {",
									"    pm.expect(category.name).to.equal(\"behmischer Marsch\");",
									"    pm.environment.set(\"category_behm_name\", category.name);",
									"})",
									"",
									"pm.test(\"namePlural is behmische Märsche\", function() {",
									"    pm.expect(category.namePlural).to.equal(\"behmische Märsche\");",
									"    pm.environment.set(\"category_behm_namePlural\", category.namePlural);",
									"})",
									"",
									"/*pm.test(\"parent is Marsch\", function() {",
									"    pm.expect(category.parent.id).to.equal(pm.environment.get(\"category_id\"));",
									"})*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"behmischer Marsch\",\n    \"namePlural\": \"behmische Märsche\",\n    \"parentId\": {{category_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/catalogue/categories",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "create polka",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var category;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    category = pm.response.json();",
									"})",
									"",
									"pm.test(\"store id\", function() {",
									"    pm.environment.set(\"category_polka_id\", category.id);",
									"})",
									"",
									"pm.test(\"name is Polka\", function() {",
									"    pm.expect(category.name).to.equal(\"Polka\");",
									"    pm.environment.set(\"category_polka_name\", category.name);",
									"})",
									"",
									"pm.test(\"namePlural is Polka\", function() {",
									"    pm.expect(category.namePlural).to.equal(\"Polka\");",
									"    pm.environment.set(\"category_polka_namePlural\", category.namePlural);",
									"})",
									"",
									"/*pm.test(\"parent is root\", function() {",
									"    pm.expect(category.parent.id).to.equal(pm.environment.get(\"category_root_id\"));",
									"})*/",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Polka\",\n    \"namePlural\": \"Polka\",\n    \"parentId\": {{category_root_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/catalogue/categories",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "create castaldo unpriviledged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status forbidden\", function() {",
									"    pm.response.to.have.status(403);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Castaldo\",\n    \"author\": \"Rudolf Nováček\",\n    \"groupType\": \"Ensemble\",\n    \"price\": 4500,\n    \"difficulty\": 3,\n    \"instrumentation\": \"POSAUNEN!!!\",\n    \"categoryId\": {{category_behm_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/catalogue/scores",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"scores"
							]
						}
					},
					"response": []
				},
				{
					"name": "create castaldo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var score;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    score = pm.response.json();",
									"})",
									"",
									"pm.test(\"store march id\", function() {",
									"    pm.environment.set(\"score_id\", score.id);",
									"})",
									"",
									"pm.test(\"group type is ensemble\", function() {",
									"    pm.expect(score.groupType).to.equal(\"Ensemble\");",
									"})",
									"",
									"pm.test(\"author is Rudolf Nováček\", function() {",
									"    pm.expect(score.author).to.equal(\"Rudolf Nováček\");",
									"})",
									"",
									"pm.test(\"title is Castaldo\", function() {",
									"    pm.expect(score.title, \"Castaldo\");",
									"    pm.environment.set(\"score_title\", score.title);",
									"})",
									"",
									"pm.test(\"instrumentation is POSAUNEN!!!\", function() {",
									"    pm.expect(score.instrumentation, \"POSAUNEN!!!\");",
									"    pm.environment.set(\"score_instrumentation\", score.instrumentation);",
									"})",
									"",
									"pm.test(\"difficulty is 3\", function() {",
									"    pm.expect(score.difficulty, 3);",
									"    pm.environment.set(\"score_difficulty\", score.difficulty);",
									"})",
									"",
									"pm.test(\"price is 4500\", function() {",
									"    pm.expect(score.price, 4500);",
									"    pm.environment.set(\"score_price\", score.price);",
									"})",
									"",
									"/*pm.test(\"category is behm\", function() {",
									"    pm.expect(score.category.id, pm.environment.get(\"category_behm_id\"));",
									"    pm.expect(score.category.name, pm.environment.get(\"category_behm_name\"));",
									"    pm.expect(score.category.namePlural, pm.environment.get(\"category_behm_namePlural\"));",
									"})*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Castaldo\",\n    \"author\": \"Rudolf Nováček\",\n    \"groupType\": \"Ensemble\",\n    \"price\": 4500,\n    \"difficulty\": 3,\n    \"instrumentation\": \"POSAUNEN!!!\",\n    \"categoryId\": {{category_behm_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/catalogue/scores",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"scores"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete castaldo unpriviledged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status is forbidden\", function() {",
									"    pm.response.to.have.status(403);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api}}/catalogue/scores/{{score_id}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"scores",
								"{{score_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete castaldo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status is ok\", function() {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api}}/catalogue/scores/{{score_id}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"scores",
								"{{score_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create castaldo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var score;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    score = pm.response.json();",
									"})",
									"",
									"pm.test(\"store march id\", function() {",
									"    pm.environment.set(\"score_id\", score.id);",
									"})",
									"",
									"pm.test(\"title is Castaldo\", function() {",
									"    pm.expect(score.title).to.equal(\"Castaldo\");",
									"    pm.environment.set(\"score_title\", score.title);",
									"})",
									"",
									"pm.test(\"groupType is ensemble\", function() {",
									"    pm.expect(score.groupType).to.equal(\"Ensemble\");",
									"})",
									"",
									"pm.test(\"author is Rudolf Nováček\", function() {",
									"    pm.expect(score.author, \"Rudolf Nováček\");",
									"})",
									"",
									"pm.test(\"instrumentation is POSAUNEN!!!\", function() {",
									"    pm.expect(score.instrumentation, \"POSAUNEN!!!\");",
									"    pm.environment.set(\"score_instrumentation\", score.instrumentation);",
									"})",
									"",
									"pm.test(\"difficulty is 3\", function() {",
									"    pm.expect(score.difficulty, 3);",
									"    pm.environment.set(\"score_difficulty\", score.difficulty);",
									"})",
									"",
									"pm.test(\"price is 4500\", function() {",
									"    pm.expect(score.price, 4500);",
									"    pm.environment.set(\"score_price\", score.price);",
									"})",
									"",
									"/*pm.test(\"category is behm\", function() {",
									"    pm.expect(score.category.id, pm.environment.get(\"category_behm_id\"));",
									"    pm.expect(score.category.name, pm.environment.get(\"category_behm_name\"));",
									"    pm.expect(score.category.namePlural, pm.environment.get(\"category_behm_namePlural\"));",
									"})*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Castaldo\",\n    \"author\": \"Rudolf Nováček\",\n    \"groupType\": \"Ensemble\",\n    \"price\": 4500,\n    \"difficulty\": 3,\n    \"instrumentation\": \"POSAUNEN!!!\",\n    \"categoryId\": {{category_behm_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/catalogue/scores",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"scores"
							]
						}
					},
					"response": []
				},
				{
					"name": "create smutna milenka",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var score;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    score = pm.response.json();",
									"})",
									"",
									"pm.test(\"store polka id\", function() {",
									"    pm.environment.set(\"score_polka_id\", score.id);",
									"})",
									"",
									"pm.test(\"title is Smutná Milenka\", function() {",
									"    pm.expect(score.title).to.equal(\"Smutná Milenka\");",
									"    pm.environment.set(\"score_polka_title\", score.title);",
									"})",
									"",
									"pm.test(\"group type is Blasorchester\", function() {",
									"    pm.expect(score.groupType).to.equal(\"Blasorchester\");",
									"})",
									"",
									"pm.test(\"author is Paevl Heidinger\", function() {",
									"    pm.expect(score.author).to.equal(\"Pavel Heidinger\");",
									"})",
									"",
									"pm.test(\"instrumentation is Behmisch\", function() {",
									"    pm.expect(score.instrumentation).to.equal(\"Behmisch\");",
									"    pm.environment.set(\"score_polka_instrumentation\", score.instrumentation);",
									"})",
									"",
									"pm.test(\"difficulty is 2\", function() {",
									"    pm.expect(score.difficulty).to.equal(2);",
									"    pm.environment.set(\"score_polka_difficulty\", score.difficulty);",
									"})",
									"",
									"pm.test(\"price is 4100\", function() {",
									"    pm.expect(score.price).to.equal(4100);",
									"    pm.environment.set(\"score_polka_price\", score.price);",
									"})",
									"",
									"/*pm.test(\"category is polka\", function() {",
									"    pm.expect(score.category.id).to.equal(pm.environment.get(\"category_polka_id\"));",
									"    pm.expect(score.category.name).to.equal(pm.environment.get(\"category_polka_name\"));",
									"    pm.expect(score.category.namePlural).to.equal(pm.environment.get(\"category_polka_namePlural\"));",
									"})*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Smutná Milenka\",\n    \"price\": 4100,\n    \"difficulty\": 2,\n    \"groupType\": \"Blasorchester\",\n    \"author\": \"Pavel Heidinger\",\n    \"instrumentation\": \"Behmisch\",\n    \"categoryId\": {{category_polka_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/catalogue/scores",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue",
								"scores"
							]
						}
					},
					"response": []
				},
				{
					"name": "get catalogue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var category;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    category = pm.response.json();",
									"})",
									"",
									"pm.test(\"store id\", function() {",
									"    pm.environment.set(\"category_root_id\", category.id);",
									"})",
									"",
									"/*pm.test(\"parent is null\", function() {",
									"    pm.expect(category.parent).to.equal(null);",
									"})*/",
									"",
									"pm.test(\"root has two children\", function() {",
									"    pm.expect(category.children.length).to.equal(2);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/catalogue",
							"host": [
								"{{api}}"
							],
							"path": [
								"catalogue"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "orders",
			"item": [
				{
					"name": "order castaldo anynomous",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var order;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    order = pm.response.json();",
									"})",
									"",
									"pm.test(\"store order id\", function() {",
									"    pm.environment.set(\"order_id\", order.id);",
									"})",
									"",
									"pm.test(\"receivedOn date is not null\", function() {",
									"    pm.expect(order.receivedOn).not.null;",
									"})",
									"",
									"pm.test(\"confirmed date is null\", function() {",
									"    pm.expect(order.confirmed).to.equal(null);",
									"})",
									"",
									"pm.test(\"billing number is not null\", function() {",
									"    pm.expect(order.billingNumber).is.equal(null);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"identity\": {\n    \"salutation\": \"Dr\",\n    \"firstName\": \"Emmett\",\n    \"lastName\": \"Brown\",\n    \"email\": \"emmett.brown@bttf.com\",\n    \"telephone\": \"00437946825\",\n    \"address\": {\n      \"city\": \"Leopoldsdorf im Marchfelde\",\n      \"postCode\": \"2285\",\n      \"street\": \"Hauptplatz\",\n      \"streetNumber\": \"1\",\n      \"stateId\": {{state_id}}\n    }\n  },\n  \"items\": [\n    {\n      \"id\": {{score_id}},\n      \"quantity\": 1\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/orders",
							"host": [
								"{{api}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "confirm castaldo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var order;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    order = pm.response.json();",
									"})",
									"",
									"pm.test(\"correct total\", function() {",
									"    pm.expect(order.total).to.equal(parseInt(pm.environment.get(\"score_price\")) + parseInt(pm.environment.get(\"zone_shipping\")));",
									"})",
									"",
									"pm.test(\"correct title\", function() {",
									"    pm.expect(order.orderedItems[0].title).to.equal(pm.environment.get(\"score_title\"));",
									"})",
									"",
									"pm.test(\"correct quantity\", function() {",
									"    pm.expect(order.orderedItems[0].quantity).to.equal(1);",
									"})",
									"",
									"pm.test(\"salutation is Dr\", function() {",
									"    pm.expect(order.identity.salutation).to.equal(\"Dr\");",
									"})",
									"",
									"pm.test(\"firstname is Emmett\", function() {",
									"    pm.expect(order.identity.firstName).to.equal(\"Emmett\");",
									"})",
									"",
									"pm.test(\"lastname is Brown\", function() {",
									"    pm.expect(order.identity.lastName).to.equal(\"Brown\");",
									"})",
									"",
									"pm.test(\"company is null\", function() {",
									"    pm.expect(order.identity.company).to.equal(null);",
									"})",
									"",
									"pm.test(\"email is emmet.brown@bttf.com\", function() {",
									"    pm.expect(order.identity.email).to.equal(\"emmett.brown@bttf.com\");",
									"})",
									"",
									"pm.test(\"telephone is 00437946825\", function() {",
									"    pm.expect(order.identity.telephone).to.equal(\"00437946825\");",
									"})",
									"",
									"pm.test(\"city is Leopoldsdorf im Marchfelde\", function() {",
									"    pm.expect(order.identity.address.city).to.equal(\"Leopoldsdorf im Marchfelde\");",
									"})",
									"",
									"pm.test(\"receivedOn date is not null\", function() {",
									"    pm.expect(order.receivedOn).is.not.oneOf([null,undefined]);",
									"})",
									"",
									"pm.test(\"confirmed date is not null\", function() {",
									"    pm.expect(order.confirmed).is.not.oneOf([null,undefined]);",
									"})",
									"",
									"pm.test(\"billing number is not null\", function() {",
									"    pm.expect(order.billingNumber).is.not.oneOf([null,undefined]);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{api}}/orders/confirmations/{{order_id}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"orders",
								"confirmations",
								"{{order_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "order complex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var order;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    order = pm.response.json();",
									"})",
									"",
									"pm.test(\"store order id\", function() {",
									"    pm.environment.set(\"order_id\", order.id);",
									"})",
									"",
									"pm.test(\"receivedOn date is not null\", function() {",
									"    pm.expect(order.receivedOn).not.null;",
									"})",
									"",
									"pm.test(\"confirmed date is null\", function() {",
									"    pm.expect(order.confirmed).to.equal(null);",
									"})",
									"",
									"pm.test(\"billing number is not null\", function() {",
									"    pm.expect(order.billingNumber).is.equal(null);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"identity\": {\n    \"salutation\": \"Herr\",\n    \"firstName\": \"Marty\",\n    \"lastName\": \"McFly\",\n    \"company\": \"The Time Travelers\",\n    \"email\": \"marty.mcfly@bttf.com\",\n    \"telephone\": \"00436647813568\",\n    \"address\": {\n      \"city\": \"Leopoldsdorf im Marchfelde\",\n      \"postCode\": \"2285\",\n      \"street\": \"Hauptplatz\",\n      \"streetNumber\": \"2\",\n      \"stateId\": {{state_id}}\n    }\n  },\n  \"deliveryAddress\": {\n      \"city\": \"Wien\",\n      \"postCode\": \"1010\",\n      \"street\": \"Stephansplatz\",\n      \"streetNumber\": \"1\",\n      \"stateId\": {{state_id}}\n  },\n  \"items\": [\n    {\n      \"id\": {{score_id}},\n      \"quantity\": 4\n    },\n    {\n        \"id\": {{score_polka_id}},\n        \"quantity\": 2\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/orders",
							"host": [
								"{{api}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "confirm complex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var order;",
									"pm.test(\"status ok\", function() {",
									"    pm.response.to.have.status(200);",
									"    order = pm.response.json();",
									"})",
									"",
									"pm.test(\"salutation is Herr\", function() {",
									"    pm.expect(order.identity.salutation, \"Herr\");",
									"})",
									"",
									"pm.test(\"correct total\", function() {",
									"    pm.expect(order.total).to.equal(parseInt(pm.environment.get(\"score_price\")) * 4 + parseInt(pm.environment.get(\"score_polka_price\")) * 2 + parseInt(pm.environment.get(\"zone_shipping\")));",
									"})",
									"",
									"pm.test(\"firstname is Marty\", function() {",
									"    pm.expect(order.identity.firstName).to.equal(\"Marty\");",
									"})",
									"",
									"pm.test(\"lastname is McFly\", function() {",
									"    pm.expect(order.identity.lastName).to.equal(\"McFly\");",
									"})",
									"",
									"pm.test(\"company is The Time Travelers\", function() {",
									"    pm.expect(order.identity.company).to.equal(\"The Time Travelers\");",
									"})",
									"",
									"pm.test(\"email is marty.mcfly@bttf.com\", function() {",
									"    pm.expect(order.identity.email).to.equal(\"marty.mcfly@bttf.com\");",
									"})",
									"",
									"pm.test(\"telephone is 00436647813568\", function() {",
									"    pm.expect(order.identity.telephone).to.equal(\"00436647813568\");",
									"})",
									"",
									"pm.test(\"city is Leopoldsdorf im Marchfelde\", function() {",
									"    pm.expect(order.identity.address.city).to.equal(\"Leopoldsdorf im Marchfelde\");",
									"})",
									"",
									"pm.test(\"postCode is 2285\", function() {",
									"    pm.expect(order.identity.address.postCode).to.equal(\"2285\");",
									"})",
									"",
									"pm.test(\"street is Hauptplatz\", function() {",
									"    pm.expect(order.identity.address.street).to.equal(\"Hauptplatz\");",
									"})",
									"",
									"pm.test(\"street number is 2\", function() {",
									"    pm.expect(order.identity.address.streetNumber).to.equal(\"2\");",
									"})",
									"",
									"pm.test(\"delivery city is Wien\", function() {",
									"    pm.expect(order.deliveryAddress.city).to.equal(\"Wien\");",
									"})",
									"",
									"pm.test(\"delivery postCode is 1010\", function() {",
									"    pm.expect(order.deliveryAddress.postCode).to.equal(\"1010\");",
									"})",
									"",
									"pm.test(\"delivery street is Stephansplatz\", function() {",
									"    pm.expect(order.deliveryAddress.street).to.equal(\"Stephansplatz\");",
									"})",
									"",
									"pm.test(\"delivery street number is 1\", function() {",
									"    pm.expect(order.deliveryAddress.streetNumber).to.equal(\"1\");",
									"})",
									"",
									"pm.test(\"receivedOn date is not null\", function() {",
									"    pm.expect(order.receivedOn).is.not.oneOf([null,undefined]);",
									"})",
									"",
									"pm.test(\"confirmed date is not null\", function() {",
									"    pm.expect(order.confirmed).is.not.oneOf([null,undefined]);",
									"})",
									"",
									"pm.test(\"billing number is not null\", function() {",
									"    pm.expect(order.billingNumber).is.not.oneOf([null,undefined]);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{api}}/orders/confirmations/{{order_id}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"orders",
								"confirmations",
								"{{order_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "assets",
			"item": [
				{
					"name": "pdf",
					"item": [
						{
							"name": "get non existing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status not found\", function() {",
											"    pm.response.to.have.status(404);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api}}/assets/scores/{{score_id}}/pdf",
									"host": [
										"{{api}}"
									],
									"path": [
										"assets",
										"scores",
										"{{score_id}}",
										"pdf"
									]
								}
							},
							"response": []
						},
						{
							"name": "create pdf unpriviledged",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status forbidden\", function() {",
											"    pm.response.to.have.status(403);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "postman/assets/helicon.pdf"
									}
								},
								"url": {
									"raw": "{{api}}/assets/scores/{{score_id}}/pdf",
									"host": [
										"{{api}}"
									],
									"path": [
										"assets",
										"scores",
										"{{score_id}}",
										"pdf"
									]
								}
							},
							"response": []
						},
						{
							"name": "create pdf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "postman/assets/helicon.pdf"
									}
								},
								"url": {
									"raw": "{{api}}/assets/scores/{{score_id}}/pdf",
									"host": [
										"{{api}}"
									],
									"path": [
										"assets",
										"scores",
										"{{score_id}}",
										"pdf"
									]
								}
							},
							"response": []
						},
						{
							"name": "get existing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api}}/assets/scores/{{score_id}}/pdf",
									"host": [
										"{{api}}"
									],
									"path": [
										"assets",
										"scores",
										"{{score_id}}",
										"pdf"
									]
								}
							},
							"response": []
						},
						{
							"name": "create pdf invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status not found\", function() {",
											"    pm.response.to.have.status(404);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "postman/assets/helicon.pdf"
									}
								},
								"url": {
									"raw": "{{api}}/assets/scores/123456/pdf",
									"host": [
										"{{api}}"
									],
									"path": [
										"assets",
										"scores",
										"123456",
										"pdf"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete pdf unpriviledged",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status forbidden\", function() {",
											"    pm.response.to.have.status(403);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api}}/assets/scores/{{score_id}}/pdf",
									"host": [
										"{{api}}"
									],
									"path": [
										"assets",
										"scores",
										"{{score_id}}",
										"pdf"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete pdf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api}}/assets/scores/{{score_id}}/pdf",
									"host": [
										"{{api}}"
									],
									"path": [
										"assets",
										"scores",
										"{{score_id}}",
										"pdf"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete non existing pdf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status not found\", function() {",
											"    pm.response.to.have.status(404);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api}}/assets/scores/{{score_id}}/pdf",
									"host": [
										"{{api}}"
									],
									"path": [
										"assets",
										"scores",
										"{{score_id}}",
										"pdf"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "audio",
					"item": [
						{
							"name": "get non existing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status not found\", function() {",
											"    pm.response.to.have.status(404);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api}}/assets/scores/{{score_id}}/audio",
									"host": [
										"{{api}}"
									],
									"path": [
										"assets",
										"scores",
										"{{score_id}}",
										"audio"
									]
								}
							},
							"response": []
						},
						{
							"name": "create audio unpriviledged",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status forbidden\", function() {",
											"    pm.response.to.have.status(403);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "postman/assets/helicon.ogg"
									}
								},
								"url": {
									"raw": "{{api}}/assets/scores/{{score_id}}/audio",
									"host": [
										"{{api}}"
									],
									"path": [
										"assets",
										"scores",
										"{{score_id}}",
										"audio"
									]
								}
							},
							"response": []
						},
						{
							"name": "create audio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "postman/assets/helicon.ogg"
									}
								},
								"url": {
									"raw": "{{api}}/assets/scores/{{score_id}}/audio",
									"host": [
										"{{api}}"
									],
									"path": [
										"assets",
										"scores",
										"{{score_id}}",
										"audio"
									]
								}
							},
							"response": []
						},
						{
							"name": "create audio mp3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "postman/assets/helicon.mp3"
									}
								},
								"url": {
									"raw": "{{api}}/assets/scores/{{score_id}}/audio",
									"host": [
										"{{api}}"
									],
									"path": [
										"assets",
										"scores",
										"{{score_id}}",
										"audio"
									]
								}
							},
							"response": []
						},
						{
							"name": "create audio m4a",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "postman/assets/helicon.m4a"
									}
								},
								"url": {
									"raw": "{{api}}/assets/scores/{{score_id}}/audio",
									"host": [
										"{{api}}"
									],
									"path": [
										"assets",
										"scores",
										"{{score_id}}",
										"audio"
									]
								}
							},
							"response": []
						},
						{
							"name": "get existing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api}}/assets/scores/{{score_id}}/audio",
									"host": [
										"{{api}}"
									],
									"path": [
										"assets",
										"scores",
										"{{score_id}}",
										"audio"
									]
								}
							},
							"response": []
						},
						{
							"name": "create audio invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status not found\", function() {",
											"    pm.response.to.have.status(404);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": "postman/assets/helicon.ogg"
									}
								},
								"url": {
									"raw": "{{api}}/assets/scores/123456/audio",
									"host": [
										"{{api}}"
									],
									"path": [
										"assets",
										"scores",
										"123456",
										"audio"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete audio unpriviledged",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status forbidden\", function() {",
											"    pm.response.to.have.status(403);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api}}/assets/scores/{{score_id}}/audio",
									"host": [
										"{{api}}"
									],
									"path": [
										"assets",
										"scores",
										"{{score_id}}",
										"audio"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete audio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status ok\", function() {",
											"    pm.response.to.have.status(200);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api}}/assets/scores/{{score_id}}/audio",
									"host": [
										"{{api}}"
									],
									"path": [
										"assets",
										"scores",
										"{{score_id}}",
										"audio"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete non existing audio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status not found\", function() {",
											"    pm.response.to.have.status(404);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api}}/assets/scores/{{score_id}}/audio",
									"host": [
										"{{api}}"
									],
									"path": [
										"assets",
										"scores",
										"{{score_id}}",
										"audio"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "api",
			"value": "http://localhost:8080"
		}
	]
}